"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const core_1 = require("@angular-devkit/core");
const project_1 = require("../utility/project");
const styles_1 = require("../utility/styles");
const modify_json_file_1 = require("../utility/modify-json-file");
const dependencies_1 = require("@schematics/angular/utility/dependencies");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const source_1 = require("../utility/source");
const ast_utils_1 = require("@schematics/angular/utility/ast-utils");
const change_1 = require("@schematics/angular/utility/change");
const change_2 = require("../utility/change");
const styles = `
html, body {
  margin: 0px;
  min-height: 100%;
  height: 100%;
}

* {
  box-sizing: border-box;
}`;
function addStyles(rootPath) {
    return (host) => {
        const stylesPath = rootPath.replace(/app\//, '') + 'styles.scss';
        const source = source_1.getSourceFile(host, stylesPath);
        if (!source) {
            return host;
        }
        const changes = new change_1.InsertChange(stylesPath, source.getEnd(), styles);
        return change_2.applyChanges(host, [changes], stylesPath);
    };
}
function addBuildThemeScript() {
    return (host) => {
        modify_json_file_1.modifyJSONFile(host, './package.json', config => {
            const scripts = config['scripts'];
            scripts['build-themes'] = 'devextreme build';
            return config;
        });
        return host;
    };
}
function addCustomThemeStyles(options, rootPath) {
    return (host) => {
        modify_json_file_1.modifyJSONFile(host, './angular.json', config => {
            const stylesList = [
                `${rootPath}/themes/generated/theme.base.css`,
                `${rootPath}/themes/generated/theme.additional.css`,
                'node_modules/devextreme/dist/css/dx.common.css'
            ];
            return styles_1.addStylesToApp(host, options.project, config, stylesList);
        });
        return host;
    };
}
function addViewportToRoot(appPath) {
    return (host) => {
        const indexPath = `${appPath.replace(/app\//, '')}index.html`;
        let indexContent = host.read(indexPath).toString();
        indexContent = indexContent.replace(/<app-root>/, '<app-root class="dx-viewport">');
        host.overwrite(indexPath, indexContent);
        return host;
    };
}
function addImportToAppModule(rootPath, importName, path) {
    return (host) => {
        const appModulePath = rootPath + 'app.module.ts';
        const source = source_1.getSourceFile(host, appModulePath);
        if (!source) {
            return host;
        }
        const changes = ast_utils_1.addImportToModule(source, appModulePath, importName, path);
        return change_2.applyChanges(host, changes, appModulePath);
    };
}
function getContentForAppComponent(project, layout) {
    const title = project.split('-').map(part => core_1.strings.capitalize(part)).join(' ');
    return `<app-${layout} title="${title}">
    <router-outlet></router-outlet>

    <app-footer>
        Copyright Â© 2011-2018 Developer Express Inc.
        <br/>
        All trademarks or registered trademarks are property of their respective owners.
    </app-footer>
</app-${layout}>
`;
}
function addContentToAppComponent(rootPath, component, project, layout) {
    return (host) => {
        const appModulePath = rootPath + component;
        const source = source_1.getSourceFile(host, appModulePath);
        const componentContent = getContentForAppComponent(project, layout);
        if (!source) {
            return host;
        }
        host.overwrite(appModulePath, componentContent);
        return host;
    };
}
function getComponentName(host, rootPath) {
    let name = '';
    const index = 1;
    if (!host.exists(rootPath + 'app.component.ts')) {
        name = 'app';
    }
    while (!name) {
        const componentName = `app${index}`;
        if (!host.exists(`${rootPath}${componentName}.component.ts`)) {
            name = componentName;
        }
    }
    return name;
}
function hasRoutingModule(host, rootPath) {
    return host.exists(rootPath + 'app-routing.module.ts');
}
function addPackagesToDependency() {
    return (host) => {
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: '@angular/cdk',
            version: '^7.0.0'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: 'copyfiles',
            version: '^2.1.0'
        });
        return host;
    };
}
function buildThemes() {
    const command = /^win/.test(process.platform) ? 'npm.cmd' : 'npm';
    const spawnOptions = {
        stdio: [process.stdin, process.stdout, process.stderr],
        shell: true,
        cwd: process.cwd()
    };
    child_process_1.spawn(command, ['run', 'build-themes'], spawnOptions);
}
function default_1(options) {
    return (host) => {
        const project = project_1.getProjectName(host, options.project);
        const appPath = project_1.getApplicationPath(host, project);
        const rootPath = project_1.getRootPath(host, project);
        const layout = options.layout;
        const override = options.resolveConflicts === 'override';
        const rules = [
            schematics_1.mergeWith(schematics_1.apply(schematics_1.url('./files/src'), [
                override ? schematics_1.filter(path => !path.includes('__name__')) : schematics_1.noop(),
                hasRoutingModule(host, appPath) ? schematics_1.filter(path => !path.includes('app-routing.module')) : schematics_1.noop(),
                schematics_1.template(Object.assign({ name: getComponentName(host, appPath), path: rootPath.replace(/\/?(\w)+\/?/g, '../') }, core_1.strings, { content: getContentForAppComponent(project, layout) })),
                schematics_1.move(rootPath)
            ])),
            schematics_1.mergeWith(schematics_1.apply(schematics_1.url('./files/root'), [
                schematics_1.template({
                    engine: '"angular"',
                    sourcePath: rootPath
                }),
                schematics_1.move('./')
            ])),
            addImportToAppModule(appPath, 'SideNavOuterToolbarModule', './layouts'),
            addImportToAppModule(appPath, 'SideNavInnerToolbarModule', './layouts'),
            addImportToAppModule(appPath, 'FooterModule', `./shared/components/footer/footer.component`),
            addStyles(appPath),
            addBuildThemeScript(),
            addCustomThemeStyles(options, rootPath),
            addViewportToRoot(appPath),
            addPackagesToDependency()
        ];
        if (!options.skipInstall) {
            rules.push((_, context) => {
                context.addTask(new tasks_1.NodePackageInstallTask());
            });
        }
        if (override) {
            rules.push(addContentToAppComponent(appPath, 'app.component.html', project, layout));
        }
        if (!hasRoutingModule(host, appPath)) {
            rules.push(addImportToAppModule(appPath, 'AppRoutingModule', './app-routing.module'));
        }
        if (fs_1.existsSync('./angular.json')) {
            buildThemes();
        }
        return schematics_1.chain(rules);
    };
}
exports.default = default_1;
//# sourceMappingURL=index.js.map