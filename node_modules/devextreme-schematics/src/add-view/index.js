"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const find_module_1 = require("@schematics/angular/utility/find-module");
const change_1 = require("../utility/change");
const typescript_1 = require("typescript");
const source_1 = require("../utility/source");
const core_1 = require("@angular-devkit/core");
const project_1 = require("../utility/project");
function findComponentInRoutes(text, componentName) {
    return text.indexOf(componentName) !== -1;
}
function getChangesForRoutes(name, routes) {
    const componentName = `${core_1.strings.classify(core_1.basename(core_1.normalize(name)))}Component`;
    const routesText = routes.getText();
    return findComponentInRoutes(routesText, componentName)
        ? ''
        : `{
        path: '${core_1.strings.dasherize(name)}',
        component: ${componentName}
    }`;
}
function getPathToFile(host, projectName, moduleName) {
    const rootPath = project_1.getApplicationPath(host, projectName);
    try {
        return find_module_1.findModuleFromOptions(host, { name: moduleName, path: rootPath, module: moduleName });
    }
    catch (error) {
        return;
    }
}
function isRouteVariable(node, text) {
    return node.kind === typescript_1.SyntaxKind.VariableStatement &&
        text.search(/\:\s*Routes/) !== -1;
}
function findRoutesInSource(source) {
    return source.forEachChild((node) => {
        const text = node.getText();
        if (isRouteVariable(node, text)) {
            return node;
        }
    });
}
function addViewToNavigation(options) {
    return (host) => {
        const navigationName = 'app-navigation';
        const navigationFilePath = getPathToFile(host, options.project, navigationName);
        if (navigationFilePath) {
            const source = source_1.getSourceFile(host, navigationFilePath);
            if (!source) {
                return host;
            }
            const changes = `{
            text: '${core_1.strings.capitalize(core_1.basename(core_1.normalize(options.name)))}',
            path: '${core_1.strings.dasherize(options.name)}',
            icon: '${options.icon}'
        }`;
            return change_1.applyChanges(host, changes, navigationFilePath, source.getText(), source.getEnd());
        }
    };
}
function addViewToRouting(options) {
    return (host) => {
        const routingModulePath = getPathToFile(host, options.project, options.module);
        if (!routingModulePath) {
            throw new schematics_1.SchematicsException('Specified module does not exist.');
        }
        const source = source_1.getSourceFile(host, routingModulePath);
        if (!source) {
            return host;
        }
        const routes = findRoutesInSource(source);
        if (!routes) {
            throw new schematics_1.SchematicsException('No routes found.');
        }
        const changes = getChangesForRoutes(options.name, routes);
        if (!changes) {
            return host;
        }
        return change_1.applyChanges(host, changes, routingModulePath, source.getText(), routes.getEnd());
    };
}
exports.addViewToRouting = addViewToRouting;
function getPathForView(name) {
    if (name.includes('/')) {
        return name;
    }
    return 'pages/' + name;
}
function getModuleName(addRoute, moduleName) {
    if (!moduleName && addRoute) {
        return 'app-routing';
    }
    return moduleName;
}
function addContentToView(options) {
    return (host) => {
        const name = core_1.strings.dasherize(core_1.basename(core_1.normalize(options.name)));
        const path = `${core_1.dirname(options.name)}/${name}`;
        const componentPath = `/${project_1.getApplicationPath(host, options.project)}${path}/${name}.component.html`;
        if (host.exists(componentPath)) {
            host.overwrite(componentPath, `<h2>${name}</h2>\n<div class="dx-card content-block">Put your content here</div>\n`);
        }
        return host;
    };
}
function default_1(options) {
    return (host) => {
        const addRoute = options.addRoute;
        const project = project_1.getProjectName(host, options);
        const module = getModuleName(addRoute, options.module);
        const name = getPathForView(options.name);
        const rules = [schematics_1.externalSchematic('@schematics/angular', 'component', {
                name,
                project,
                module,
                spec: options.spec,
                inlineStyle: options.inlineStyle,
                prefix: options.prefix
            }),
            addContentToView({ name, project })
        ];
        if (addRoute) {
            rules.push(addViewToRouting({ name, project, module }));
            rules.push(addViewToNavigation({ name, icon: options.icon, project }));
        }
        return schematics_1.chain(rules);
    };
}
exports.default = default_1;
//# sourceMappingURL=index.js.map